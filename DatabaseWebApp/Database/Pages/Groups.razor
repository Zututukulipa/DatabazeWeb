@page "/Groups"
@using Database.Services
@using DatabaseAdapter.OracleLib.Models
@using Blazorise.Components
@using DatabaseAdapter.OracleLib.Enums
    
<AddGroupPopUp AddPopup="_addPopup" WindowClosedCallback="ClosePopUp" GroupAddedCallback="GroupAdded"/>

<select class="form-control" @bind=SelectedGroupId>
    @foreach (var group in _userGroups)
    {
        <option value="@group.GroupId"> @group.Name </option>
    }
</select>
@if (!_addPopup && UserService.ActiveUser.Role != Roles.Student)
{
    <div class="row">
        <div class="col-sm-12">
            <button id="btnAdd" class="btn btn-success btn-md" Style="width: 100px;" @onclick="AddGroup">Add</button>
            <button id="btnDelete" class="btn btn-danger btn-md" Style="width: 100px;" @onclick="DeleteGroup">Delete</button>
        </div>
    </div>
}
    <hr>
@if (SelectedGroupId > 0)
{
    <h2>@_selectedGroup.Name</h2>
    <h3>@_selectedGroupTeacher.FirstName @_selectedGroupTeacher.LastName [@_selectedGroupTeacher.Email]</h3>
    if (_addStudentTrigger)
    {
        <h3>Add Student</h3>
        <Autocomplete TData="Students"
                      Filter="AutocompleteFilter.Contains"
                      Data="@AllStudentsList"
                      TextField="@((item) => item.FirstName + " " + item.LastName + " " + item.StudentId)"
                      ValueField="@((item) => item)"
                      SelectedValue="@_selectedStudent"
                      SelectedValueChanged="@MySearchHandler"
                      Placeholder="Search..."/>
        <Buttons>
            <Button Color="Color.Success" Clicked="@AddStudent">Add student</Button>
            <Button Color="Color.Danger" Clicked="() => { _addStudentTrigger = false; }">Cancel</Button>
        </Buttons>
    }
    <Alert @ref="_addStudentError" Color="Color.Danger">
        <CloseButton Clicked="() => { _addStudentError.Toggle();}"/>
        <AlertMessage>Error while adding!</AlertMessage>
        <AlertDescription>Maybe is student already present..</AlertDescription>
    </Alert>

    <DataGrid TItem="Students"
              @ref="_studentDataGridRef"
              Data="@ActiveGroupStudentsList"
              @bind-SelectedRow="@_selectedStudent"
              TotalItems="_totalStudents"
              ShowPager="true"
              PageSize="10"
              CurrentPage="1"
              FilterMethod="DataGridFilterMethod.StartsWith"
              Editable="true"
              EditMode="DataGridEditMode.Form">

        <DataGridCommandColumn TItem="Students">
            <EditCommandTemplate></EditCommandTemplate>
            <NewCommandTemplate>
                @if (!_addStudentTrigger && UserService.ActiveUser.Role != Roles.Student)
                {
                    <Button Color="Color.Success" Clicked="() => { _addStudentTrigger = true; }">Add</Button>
                }
            </NewCommandTemplate>
            <DeleteCommandTemplate>
                @if (UserService.ActiveUser.Role != Roles.Student)
                {
                    <Button Color="Color.Danger" Clicked="() => { RemoveStudent(context.Item); }">Remove</Button>
                }
            </DeleteCommandTemplate>
        </DataGridCommandColumn>

        <DataGridNumericColumn TItem="Students" Field="@nameof(Students.StudentId)" Caption="#" Editable="false" Sortable="true" Filterable="true"/>
        <DataGridColumn TItem="Students" Field="@nameof(Students.FirstName)" Caption="First Name" Editable="true"/>
        <DataGridColumn TItem="Students" Field="@nameof(Students.MiddleName)" Caption="Middle Name" Editable="true"/>
        <DataGridColumn TItem="Students" Field="@nameof(Students.LastName)" Caption="Last Name" Editable="true"/>
        <DataGridNumericColumn TItem="Students" Field="@nameof(Students.Year)" Caption="Year" Editable="true" Sortable="true"/>

    </DataGrid>
}



@code {

    [Inject]
    UserService ActiveUserService { get; set; }

    private GroupTableContent TableContent { get; set; }

    List<Group> _userGroups;
    public List<Students> ActiveGroupStudentsList { get; set; }
    public List<Students> AllStudentsList { get; set; }
    private bool _addPopup;
    private Students _selectedStudent;
    private int _totalStudents;
    private bool _addStudentTrigger;
    private DataGrid<Students> _studentDataGridRef;
    Alert _addStudentError;
    private Group _selectedGroup;
    private Teachers _selectedGroupTeacher;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _userGroups = ActiveUserService.UserController.GetGroupUsers(UserService.ActiveUser);
        AllStudentsList = ActiveUserService.UserController.GetStudents();
    }

    private int _selectedGroupId;

    private int SelectedGroupId
    {
        get => _selectedGroupId;
        set
        {
            if (value <= 0) throw new ArgumentOutOfRangeException(nameof(value));
            _selectedGroupId = value;
            _selectedGroup = ActiveUserService.UserController.GetGroupById(_selectedGroupId);
            _selectedGroupTeacher = ActiveUserService.UserController.GetTeacherByTeacherId(_selectedGroup.TeacherId);
            ActiveGroupStudentsList = ActiveUserService.UserController.GetGroupUsers(_selectedGroupId);
        }
    }

    private void AddGroup()
    {
        _addPopup = true;
    }

    private void GroupAdded(Group group)
    {
        _userGroups.Add(group);
        StateHasChanged();
    }

    private void ClosePopUp(bool value)
    {
        _addPopup = value;
    }

    private void DeleteGroup()
    {
        _userGroups.Remove(_userGroups.Find(x => x.GroupId == SelectedGroupId));
        ActiveUserService.UserController.RemoveGroup(SelectedGroupId);
        SelectedGroupId = _userGroups[0].GroupId;
        TableContent.Refresh();
    }

    void MySearchHandler(object newValue)
    {
        if (newValue is Students stud)
            _selectedStudent = stud;
    }


    private void AddStudent()
    {
        if (ActiveGroupStudentsList.Contains(_selectedStudent))
            _addStudentError.Show();
        else
        {
            ActiveUserService.UserController.AddStudentToGroup(_selectedStudent, SelectedGroupId);
            ActiveGroupStudentsList.Add(_selectedStudent);
            _selectedStudent = null;
            _addStudentTrigger = false;
        }

        StateHasChanged();
    }

    private void RemoveStudent(Students student)
    {
        ActiveUserService.UserController.RemoveStudentFromGroup(student, _selectedGroupId);
        ActiveGroupStudentsList.Remove(student);
        StateHasChanged();
    }

}