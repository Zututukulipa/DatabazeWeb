@page "/"
@page "/user/{userid}"
@using Database.Services
@using DatabaseAdapter.OracleLib.Models

@if (SelectedUser != null)
{
    <WallHeader SelectedUser="@SelectedUser"/>
    <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
        <Items>
            <Tab Name="home">Home</Tab>
            <Tab Name="grades">Grades</Tab>
            <Tab Name="groups">Groups</Tab>
            <Tab Name="schedule">Schedule</Tab>
        </Items>
        <Content>
            <TabPanel Name="home">
                <select class="form-control" @bind=SelectedGroupId>
                    <option value="0" selected>ALL</option>
                    @foreach (var group in _groups)
                    {
                        <option value="@group.GroupId"> @group.Name </option>
                    }
                </select>
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <EditForm Model="@_addedPostString" OnValidSubmit="@AddTask">
                                <DataAnnotationsValidator/>
                                <InputTextArea id="name" placeholder="Write new post..." @bind-Value="_addedPostString" style="width: 100%"/>
                                <button type="submit" class="btn-block btn-primary">Add Post</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
                <br/>

                <WallPosts @ref="_wallComponentControl" Posts="_posts" RemovePostChanged="RemovePost"/>
            </TabPanel>
            <TabPanel Name="grades">
                <DisplayGrades></DisplayGrades>
            </TabPanel>
            <TabPanel Name="groups">
                <Groups/>
            </TabPanel>
            <TabPanel Name="schedule">
              <DisplaySchedule HoraryStart="8" HoraryEnd="20"></DisplaySchedule>

            </TabPanel>
        </Content>
    </Tabs>
}
else
{
    <Login/>
}

@code {

    [Parameter]
    public string userId { get; set; }

    private WallPosts _wallComponentControl;


    private int _selectedGroupId;

    private int SelectedGroupId
    {
        get => _selectedGroupId;
        set
        {
            _selectedGroupId = value;
            RefreshGroupMessages();
        }
    }

    string selectedTab = "profile";


    private void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
    }


    private void RemovePost(WallPost paramWallItem)
    {
    // Remove the Task from the collection
        ActiveUserService.UserController.RemoveWallPost(paramWallItem);
        _wallComponentControl.RemovePostFromList(paramWallItem);
    }


    // Collection to hold all the Posts
    private List<WallPost> _posts = new List<WallPost>();
    // This method will run when the control is loade

    // Property to hold the description of a new Task
    // The textbox is bound to this property
    private string _addedPostString = string.Empty;
    private List<Group> _groups = new List<Group>();

    [Inject]
    UserService ActiveUserService { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (userId != string.Empty && Int32.TryParse(userId, out var uid) && uid > 0)
        {
            SelectedUser = ActiveUserService.UserController.GetUserById(uid);
        }
        else
        {
            SelectedUser = UserService.ActiveUser;
        }
        if (SelectedUser != null)
        {
            _posts = ActiveUserService.UserController.GetWallPosts(SelectedUser);
            _groups = ActiveUserService.UserController.GetUserGroups(SelectedUser);
        }
        
    }

    public User SelectedUser { get; set; }

    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(_addedPostString))
        {
            var addedPost = new WallPost(SelectedUser)
            {
                MessageContent = _addedPostString,
                Created = DateTime.Now,
                Owner = SelectedUser,
                GroupId = SelectedGroupId
            };
            _wallComponentControl.AddNewPost(addedPost);
            ActiveUserService.UserController.AddWallPost(addedPost);
            _addedPostString = string.Empty;
        }
    }

    private void RefreshGroupMessages()
    {
        _wallComponentControl.FilterPosts(SelectedGroupId);
    }

   

}